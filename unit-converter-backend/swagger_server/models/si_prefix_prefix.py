# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class SiPrefixPrefix(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, symbol: str=None, power: float=None, word: str=None):  # noqa: E501
        """SiPrefixPrefix - a model defined in Swagger

        :param name: The name of this SiPrefixPrefix.  # noqa: E501
        :type name: str
        :param symbol: The symbol of this SiPrefixPrefix.  # noqa: E501
        :type symbol: str
        :param power: The power of this SiPrefixPrefix.  # noqa: E501
        :type power: float
        :param word: The word of this SiPrefixPrefix.  # noqa: E501
        :type word: str
        """
        self.swagger_types = {
            'name': str,
            'symbol': str,
            'power': float,
            'word': str
        }

        self.attribute_map = {
            'name': 'name',
            'symbol': 'symbol',
            'power': 'power',
            'word': 'word'
        }
        self._name = name
        self._symbol = symbol
        self._power = power
        self._word = word

    @classmethod
    def from_dict(cls, dikt) -> 'SiPrefixPrefix':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SiPrefix_prefix of this SiPrefixPrefix.  # noqa: E501
        :rtype: SiPrefixPrefix
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this SiPrefixPrefix.

        The name of the prefix.  # noqa: E501

        :return: The name of this SiPrefixPrefix.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this SiPrefixPrefix.

        The name of the prefix.  # noqa: E501

        :param name: The name of this SiPrefixPrefix.
        :type name: str
        """

        self._name = name

    @property
    def symbol(self) -> str:
        """Gets the symbol of this SiPrefixPrefix.

        Symbol representing the prefix.  # noqa: E501

        :return: The symbol of this SiPrefixPrefix.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol: str):
        """Sets the symbol of this SiPrefixPrefix.

        Symbol representing the prefix.  # noqa: E501

        :param symbol: The symbol of this SiPrefixPrefix.
        :type symbol: str
        """

        self._symbol = symbol

    @property
    def power(self) -> float:
        """Gets the power of this SiPrefixPrefix.

        The power of 10 which is represented by the prefix.  # noqa: E501

        :return: The power of this SiPrefixPrefix.
        :rtype: float
        """
        return self._power

    @power.setter
    def power(self, power: float):
        """Sets the power of this SiPrefixPrefix.

        The power of 10 which is represented by the prefix.  # noqa: E501

        :param power: The power of this SiPrefixPrefix.
        :type power: float
        """
        if power is None:
            raise ValueError("Invalid value for `power`, must not be `None`")  # noqa: E501

        self._power = power

    @property
    def word(self) -> str:
        """Gets the word of this SiPrefixPrefix.

        English word for the prefix.  # noqa: E501

        :return: The word of this SiPrefixPrefix.
        :rtype: str
        """
        return self._word

    @word.setter
    def word(self, word: str):
        """Sets the word of this SiPrefixPrefix.

        English word for the prefix.  # noqa: E501

        :param word: The word of this SiPrefixPrefix.
        :type word: str
        """

        self._word = word
